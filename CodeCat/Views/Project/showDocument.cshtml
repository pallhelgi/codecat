@model CodeCat.Models.ViewModels.DocumentViewModel

@{
    ViewBag.Title = "showDocument";
}

<!-- The Tabs above the Ace Editor -->    
    <div>
        <ul class="navDoc nav nav-pills">
            @using (Html.BeginForm())
            {
                foreach (var doc in Model.documents)
                {
                    <li role:"presentation" class="@(Model.selectedDocument == doc.ID ? "active" : "")">
                        @Html.HiddenFor(m => m.document.ID)
                        @Html.HiddenFor(m => m.document.projectID)
                        <button type="submit" class="btn btn-success">@doc.name</button>
                    </li>
                }
            }
            
            <!-- /TODO Create New File Tab-->
        </ul>
    </div>

<!--The Ace Editor begin-->
<div class="container">
    <div id="ace-editor">
        @Model.document.content
    </div>
</div>

<!-- Add Document -->

<!-- Save button for Document -->
@using (Html.BeginForm("save", "Document", FormMethod.Post))
{
    <div class="container editor-save-div">
        @Html.HiddenFor(m => m.document.content , new { @id = "hidden-editor" })
        <input type="submit" value="Save" class="editor-save-button btn btn-success" />
        
        <button type="button" onclick="k()">Button...</button>
        <script>
            var url = window.location.href;
            var projectID = parseInt(url.substring(url.lastIndexOf('/') + 1));
            console.log(projectID);
            
            function k() {
                window.location.href = "../../Document/AddDocument/" + projectID;
            };
        </script>
     </div>
}

<script>
    $("form").click(function () {
            console.log("Hallo");
            console.log($("#hidden-editor").val(editor.getSession().getValue()));
            $("#hidden-editor").val(editor.getSession().getValue());
            var content = editor.getSession().getValue();

            var url = window.location.href;
            var docID = parseInt(url.substring(url.lastIndexOf('?') + 1));
            console.log(docID);
            
            function f() {
                window.location.href = "../../Document/ShowDocument/" + docID;
            };
        });
</script>


@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.6/ace.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>

        var documentID = @Model.document.ID;

        console.log(documentID);

        var editor = ace.edit("ace-editor");
        editor.setTheme("ace/theme/monokai");
        editor.getSession().setMode("ace/mode/javascript");

      


        var codeHub = $.connection.codeHub;
        var silent = false;

        codeHub.client.onChange = function (changeData) {
            console.log(changeData);

            silent = true;
            editor.getSession().getDocument().applyDelta(changeData);
            silent = false;
        };

        $.connection.hub.start().done(function () {

            codeHub.server.joinDocument(documentID);

            editor.on("change", function (obj) {
                if (silent){
                    return;
                }
                console.log(obj);
                codeHub.server.onChange(obj, documentID);
            });
        });
    </script>
}

<!--Test Gudrunar-->
<!-- Autocomplete -->
<!--
<script>
    ace.require("ace/ext/language_tools");
    var editor = ace.edit("ace-editor");
    editor.setOptions({
        enableBasicAutocompletion: true
    });
</script>
-->
<!-- Trying to save the file -->
<!--
<script>
    editor.getSession().on('change', function (e) {
        thisfile = editor.getValue();
    });
</script>
-->
<!--
<script>
    var lastLine = editor.session.getLength();
    editor.gotoLine(lastLine);
    editor.insert("the new text here"); // or session.setValue
    editor.getValue(); // or session.getValue
</script>
-->
<!--
<!-- Script to override enter button -->
<script>
    /* editor.commands.addCommand({
        name: 'Enter',
        bindKey: {win: 'Enter',  mac: 'Enter'},
        exec: function(editor) {
            editor.gotoLine(editor.session.getLength() + 1);
            editor.insert("\n");
            editor.insert("I'm at the bottom.");
        },
        readOnly: true // false if this command should not apply in readOnly mode
    });*/
</script>
<!--End of test Gudrun-->
<!--The Ace Editor end-->